#!/bin/bash
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat /dev/stdin <<DOC
Usage: ${0##*/} [SUBCOMMAND]

Helpers that extend functionality of the hab origin namespace.

SUBCOMMANDS:
    download-sig-key ORIGIN     Download the private signing key for ORIGIN stored in the citadel S3 bucket.
DOC
}

# Place any requirement we need for hab-origin to work
function enforce_requirements() {
  # Make sure the AWS CLI is installed
  which aws &>/dev/null
  if [[ $? -ne 0 ]]; then
    echo "${0##*/}: Unable to find 'aws' executable."
    echo "Make sure you have the aws cli installed. Try 'install-tool aws'."
    exit 2
  fi
}

function download_sig_key() {
  enforce_requirements

  origin="$1"

  # Create the keys directory if it is missing
  [ ! -d "$HOME/.hab/cache/keys" ] && mkdir -p "$HOME/.hab/cache/keys"

  # Make sure we have the public signing key
  hab origin key download "$origin"

  # Extract the name of the key+revision from the public key
  # (@afiune) The last entry is the active key
  key_with_revision=$(find "$HOME/.hab/cache/keys" -name "$origin-20*.pub" -exec basename {} \; | cut -d'.' -f1 | tail -1)

  if [ ! -f "$HOME/.hab/cache/keys/${key_with_revision}.sig.key" ]
  then
    # Download the key from citadel
    echo "$(citadel ${key_with_revision}.sig.key)" > "$HOME/.hab/cache/keys/${key_with_revision}.sig.key"
  fi
}

case "$1" in
  "download-sig-key")
    download_sig_key $2
    ;;
  "-h"|"--help")
    usage
    ;;
  "")
    usage
    exit 1
    ;;
  *)
    echo "${0##*/}: invalid option '$1'"
    echo "Try '${0##*/} --help' for more information."
    exit 2
esac
