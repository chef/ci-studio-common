#!/bin/bash
# shellcheck disable=SC1090,SC1091
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Error out if someone tries to execute this script, rather than sourcing it.
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  cat <<'DOC'
ERROR: studio-common is designed to be sourced, not executed. Please source this file as exemplified below:

  source "$(hab pkg path chef/ci-studio-common)/bin/studio-common"

DOC
  exit 1
fi

CURL="$(hab pkg path core/curl)/bin/curl"
DEFAULT_SUPPORTED_HAB_VERSION=$($CURL -sL https://raw.githubusercontent.com/chef/ci-studio-common/master/.hab-version)
SUPPORTED_HAB_VERSION="${RECOMMENDED_HAB_VERSION:-$DEFAULT_SUPPORTED_HAB_VERSION}"
export SUPPORTED_HAB_VERSION

# Ensure that the installed version of the hab toolchain is >= to the required version.
#
# Given the rapid development and release cadence of Habitat, we want to ensure that
# developers are using a version of Habitat is is well tested against both this library
# and the supporting automation (i.e. Expeditor builds).
required_version="$SUPPORTED_HAB_VERSION"
installed_version=$(hab -V | awk '{print $NF}' | cut -f1 -d/)

MAJOR=$(echo "$installed_version"  | cut -f1 -d.)
MINOR=$(echo "$installed_version"  | cut -f2 -d.)
PATCH=$(echo "$installed_version"  | cut -f3 -d.)
R_MAJOR=$(echo "$required_version" | cut -f1 -d.)
R_MINOR=$(echo "$required_version" | cut -f2 -d.)
R_PATCH=$(echo "$required_version" | cut -f3 -d.)

need_upgrade=false
is_newer=false

[[ $PATCH -lt $R_PATCH ]] && need_upgrade=true
[[ $PATCH -gt $R_PATCH ]] && is_newer=true

if [[ $MINOR -ne $R_MINOR ]]; then
  [[ $MINOR -lt $R_MINOR ]] && need_upgrade=true || need_upgrade=false
  [[ $MINOR -gt $R_MINOR ]] && is_newer=true || is_newer=false
fi
if [[ $MAJOR -ne $R_MAJOR ]]; then
  [[ $MAJOR -lt $R_MAJOR ]] && need_upgrade=true || need_upgrade=false
  [[ $MAJOR -gt $R_MAJOR ]] && is_newer=true || is_newer=false
fi

if $need_upgrade; then
  echo "WARNING: This project suggests that you upgrade your Habitat installation to '$SUPPORTED_HAB_VERSION'"
  echo "         Run:"
  echo "         => hab studio rm"
  echo "         to remove the studio, and then"
  echo "         => curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash -s -- -v $SUPPORTED_HAB_VERSION"
fi;

if $is_newer; then
  echo "WARNING: Habitat version '$installed_version' is newer than the version of Habitat recommended for this project."
  echo "         Please consider exiting the studio, running:"
  echo "         => hab studio rm"
  echo "         to remove the studio, and then"
  echo "         => curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash -s -- -v $SUPPORTED_HAB_VERSION"
fi;

# Assuming we have the correct version of Habitat installed, we can proceed.

# Source the plan.sh and default.toml files (if they exist)
export PLAN_CONTEXT="${PLAN_CONTEXT:-/src/habitat}"
[[ -f /src/habitat/plan.sh ]] && source /src/habitat/plan.sh
[[ -f /src/habitat/default.toml ]] && export TOML_FILE=/src/habitat/default.toml

# The folder where all the documentation is stored
mkdir -p /tmp/docs /tmp/aliases

# This is a helper function that allows use to document functions inline with the
# code, but also make that documentation available to end user in the studio.
#
# The first line of the document will show up when the user runs 'describe'.
# The full content will appear when the user runs 'describe <function>'
#
# When running in a CI environment, these documents are not created.
function document() {
  name="$1"
  content=$(cat /dev/stdin)

  [[ -z "${CI:-}" ]] && echo -e "$content" > "/tmp/docs/${name}"
}

# This is a helper function that allows you to quickly and easily add an alias for
# a helper function. It will also ensure that a list of aliases are printed when
# you run `describe`.
function add_alias() {
  fun="$1"
  a="$2"

  eval "alias $a=$fun"
  [[ -z "${CI:-}" ]] && echo -e "$a" > "/tmp/aliases/$fun"
}

# This function allows the user to learn more about the studio.
#
#   1. Passing no argument will print out a list of all documented functions
#   2. Passing the name of a function will print out that functions documentation
function describe() {
  if [[ -z "${CI:-}" ]]; then
    echo
    if [[ -z "$1" ]]; then
      echo "The following functions are available for your use in this studio:"
      echo
      for file in /tmp/docs/*
      do
        fun="$(basename "$file")"
        echo -n "  $fun"
        [[ -f "/tmp/aliases/$fun" ]] && printf " [alias: %s]" "$(cat /tmp/aliases/"$fun")"
        echo
        echo "  $(head -n 1 "$file")"
      done
      if [[ -d "/tmp/aliases" ]]; then
        echo
        echo "ALIASES:"
        for a in /tmp/aliases/*
        do
          printf "  %-6s Alias for: %s \\n" "$(cat "$a")" "$(basename "$a")"
        done
      fi
      echo
      echo "To learn more about a particular function, run 'describe <function>'."
    else
      cat "/tmp/docs/$1"
    fi
    echo
  fi
}

# This function allows the user to print a nice "welcome" or "getting started"
# message when a new user enters the studio.
function getting_started() {
  [[ -z "${CI:-}" ]] && cat /dev/stdin
}

# Source the .secrets file (if it exists)
if [[ -f /src/.secrets ]]; then
  echo "You are still using a .secrets file. Please switch to using HAB_STUDIO_SECRET_* instead."
fi

source_msg="Helpers from ci-studio-common"

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
dot_studio_dir="$script_dir/../dot-studio"
if ! [[ -d "$dot_studio_dir" ]]; then
  echo "ERROR: Expected dot-studio directory at $(realpath "$dot_studio_dir")"
  exit 1
fi

for file in "$dot_studio_dir"/*
do
  source "$file"
done

# Source all the files available in the .studio directory of the /src directory
# Only if the '.studio/' directory exists and it is not empty
if ls -A /src/.studio &>/dev/null; then
  for file in /src/.studio/*
  do
    source "$file"
  done
  source_msg="$source_msg and your local .studio folder";
fi;

echo "$source_msg have been added. Run 'describe' for more information.";
