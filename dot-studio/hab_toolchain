#!/bin/bash
# shellcheck disable=SC2154,SC1091
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# The following is documentation of helper commands made available in the studio
# via the Studio startup: https://github.com/habitat-sh/habitat/blob/master/components/studio/libexec/hab-studio-type-default.sh

document "build" <<DOC
  Wrapper around the 'hab pkg build' command.
DOC

document "sup-run" <<DOC
  Launch the Habtiat Supervisor in the background.
DOC
add_alias "sup-run" "sr"

document "sup-term" <<DOC
  Kill the Habitat Supervisor running in the background.
DOC
add_alias "sup-term" "st"

document "sup-log" <<DOC
  Tail the Habtiat Supervisor's output.
DOC
add_alias "sup-log" "sl"

function enforce_hab_version() {
  echo "DEPRECATED: (enforce_hab_version) This functionality is now automatically executed when the studio starts."
  return 0
}

document "install" <<DOC
  Install the specified Habitat packages (defaults to $HAB_ORIGIN/$pkg_name).

  @(arg:*) The array of packages you wish to install.
  
  If none specified it will use the last package built.
  If there are no packages available, it will build one and install it.

  Example 1 :: Install the package described in plan.sh
  -----------------------------------------------------
  install

  Example 2 :: Install (and binlink) the listed packages from the 'stable' channel.
  ---------------------------------------------------------------------------------
  OPTS="--binlink" install core/curl core/git

  Example 3 :: Install the listed packages from the 'unstable' channel.
  ---------------------------------------------------------------------
  dev_dependencies=(core/curl core/git)
  OPTS="--channel unstable" install \${dev_dependencies[@]}
DOC
function install() {
  install_cmd="install"

  if [[ "x$OPTS" != "x" ]]; then
    install_cmd="$install_cmd $OPTS"
  fi

  if [[ "x$1" == "x" ]]; then
    pushd /src >/dev/null
      if [[ ! -f results/last_build.env ]]; then
        build .
        source results/last_build.env
        eval "hab pkg $install_cmd $pkg_ident >/dev/null"
      fi
    popd
  else
    for pkg in "$@"
    do
      echo "Installing $pkg"
      eval "hab pkg $install_cmd $pkg >/dev/null"
    done
  fi
}

document "export_docker_image" <<DOC
  Export a Docker Image of this Habitat package.

  This function uses the latest Habitat package available (as determined by the last_build.env file).
  If no last_build.env file is present, it will perform a build automatically.
DOC
function export_docker_image() {
  pushd /src >/dev/null;
    if [[ ! -f results/last_build.env ]]; then
        echo "=> No Habitat build found - building now. [please wait]";
        build >/dev/null;
        [[ $? -ne 0 ]] && return 1;
    fi;
    source results/last_build.env;
    echo "=> Latest build: $pkg_artifact";
    echo "=> Exporting Habitat package into a Docker image. [please wait]";
    hab pkg export docker "results/${pkg_artifact}" >/dev/null
    if [[ $? -ne 0 ]]; then
        # If something went wrong here is because the pkg export cmd failed
        echo "Unable to export package as a Docker Image.";
        echo "Run 'hab pkg export docker \"$pkg_artifact\"' and diagnose.";
        popd > /dev/null;
        return 1;
    fi;
    export DOCKER_TAG="${pkg_version}-${pkg_release}";
    export DOCKER_REPO="${pkg_origin}/${pkg_name}";
    export DOCKER_IMAGE="${DOCKER_REPO}:${DOCKER_TAG}";
    echo "=> Docker image successfully built: $DOCKER_IMAGE";
    echo "=> Now you can use the image '$DOCKER_REPO' on any 'docker-compose.yml'";
  popd >/dev/null
}

document "install_if_missing" <<DOC
  Install the package and binlink the binary only if it is missing.

  @(arg:1) The name of the package that contains the binary
  @(arg:2) The name of the binary to binlink
DOC
function install_if_missing() {
  # Install the package if it is not installed
  if [[ ! -d "/hab/pkgs/$1" ]];
  then
    install "$1" > /dev/null
  fi

  # binlink the binary if it is not already binlinked
  if [[ ! -L "/hab/bin/$2" ]];
  then
    hab pkg binlink "$1" "$2" > /dev/null
  fi
}
