#!/bin/bash
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

document "wait_for_success" <<DOC
  Wait for the given command to succeed.

  @(arg:*) The command to run

  Example 1
  ---------
  wait_for_success curl localhost:8080/status
DOC
function wait_for_success() {
  while : ; do
    if eval "$@" >/dev/null 2>/dev/null
    then
      break
    else
      sleep 1
    fi
    echo " => Waiting for '$*' to succeed."
  done
}

document "wait_for_svc_to_load" <<DOC
  Helper function to wait for a Habitat service (hab svc) to be loaded by the Habitat Supervisor.

  @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
  @(arg:2) Wheter or not this process runs silently
DOC
function wait_for_svc_to_load() {
  while [[ $(hab sup status "$1" | awk -F, '{gsub(/ /, "", $2); print $2}') != "state:up" ]]; do
    sleep 1
    [[ "$2" != "silent" ]] && echo " => Waiting to load svc $1"
  done
}

document "wait_for_port_to_listen" <<DOC
  Wait for a port to be listening.

  @(arg:1) Port to wait for to be listening
  @(arg:2) Wheter or not this process runs silently
DOC
function wait_for_port_to_listen() {
  install_if_missing core/busybox-static netstat
  
  while : ; do
    if netstat -an | grep "$1" | grep LISTEN >/dev/null 2>/dev/null
    then
      break
    else
      sleep 1
    fi
    [[ "$2" != "silent" ]] && echo " => Waiting for port $1 to be listening"
  done
}

document "wait_for_ok_response" <<DOC
  Wait for the provided URL to response with status code (200)

  @(arg:1) URL to curl

  Example: Wait for www.google.com to return Ok
  ---------------------------------------------
  wait_for_ok_response www.google.com
DOC
function wait_for_ok_response() {
  [[ "$1" == "" ]] && echo "Missing url argument; try 'describe wait_for_ok_response'" && return 1;
  # Customize code?
  code=200;
  install_if_missing core/curl curl
  while : ; do
    response=$(curl --write-out %{http_code} --silent --output /dev/null $1)
    [[ $response -eq $code ]] && break || sleep 1
    echo " => Waiting for '$1' to response OK ($code). [Got:$response]"
  done
}
