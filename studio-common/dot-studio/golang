#!/bin/bash
# shellcheck disable=SC1090
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

document "setup_go_workspace" <<DOC
  Setup the Go Workspace. (requires \$pkg_scaffolding to be set)

  This function will leverage the scaffolding-go configured at \$pkg_scaffolding.
  It will install it and use the go_before callback to setup the Go Workspace.
  If there are no libraries/callbacks, it will still configure it by linking the /src
  directory into the Go Workspace.
DOC
# shellcheck disable=SC2154
function setup_go_workspace() {
  # Verify that we are using the Go Scaffolding
  if [[ ! "$pkg_scaffolding" =~ "scaffolding-go" ]]; then
    error "Unable to setup Go Workspace."
    error "${FUNCNAME[0]}: requires the '$(yellow pkg_scaffolding)' variable to exist in your plan.sh"
    return 2
  fi;

  # Verify if the Go Workspace has been already configured
  if [[ -n $scaffolding_go_workspace_src ]]; then
    return 0
  fi

  # Currently the scaffolding-go has all the logic to setup the
  # Go Workspace, lets leverage all its functionality
  log_line "${YELLOW}Configuring Go Workspace${NC}"

  export scaffolding_go_gopath="${scaffolding_go_gopath:-/hab/cache/src/scaffolding-go-gopath}"
  install "$pkg_scaffolding" >/dev/null

  source "$(pkg_path_for "$pkg_scaffolding")/lib/scaffolding.sh"
  if [[ "$(type -t scaffolding_load)" = "function" ]]; then
    scaffolding_load
  fi;

  if [[ "$(type -t scaffolding_go_before)" = "function" ]]; then
    scaffolding_go_before
  fi;

  # Install go & git
  install_if_missing core/go go
  install_if_missing core/go gofmt
  install_if_missing core/git git
  log_line "$(green "Available scaffolding variables:")"
  log_line "  \$scaffolding_go_gopath        - $scaffolding_go_gopath"
  log_line "  \$scaffolding_go_workspace_src - $scaffolding_go_workspace_src"
  log_line "  \$scaffolding_go_pkg_path      - $scaffolding_go_pkg_path"

  return 0
}

# shellcheck disable=SC2154
document "enter_go_workspace" <<DOC
  Change dir to the $pkg_name Go Workspace.

  It will automatically setup the Go Workspace if missing
DOC
function enter_go_workspace() {
  setup_go_workspace
  cd "$scaffolding_go_pkg_path" || return
}
add_alias "enter_go_workspace" "egw"

document "install_go_tool" <<DOC
  Install the specified go tool(s).

  @(arg:*) The array of packages you wish to install.

  The default behavior is to install go tools with 'go install -v' but you can
  override this by specifying the \$GO_TOOL_METHOD="get" so that it uses 'go get -u'
  instead, be aware that you have to have a vendor/ directory with the tools.

  Example 1 :: Install the listed go tool generating a static linked binary
  ---------------------------------------------------------------------------------
  GO_STATIC_BIN=true install_go_tool github.com/golang/dep/cmd/dep

  Example 2 :: Install a number of go tools from your vendor/ directory
  --------------------------------------------------------------------------
  local proto_go_tools=(
    github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
    github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
    github.com/golang/protobuf/protoc-gen-go
  )
  GO_TOOL_VENDOR=true install_go_tool "\${proto_go_tools[@]}"

  Example 3 :: Install a go tool from the internet. (No version control)
  --------------------------------------------------------------------------
  GO_TOOL_METHOD="get" install_go_tool "\${proto_go_tools[@]}"
DOC
function install_go_tool() {
  setup_go_workspace
  local go_cmd="go install -v"
  if [[ "$GO_TOOL_METHOD" == "get" ]]; then
    go_cmd="go get -u"
  fi

  # Add static linked flags if needed
  if [[ $GO_STATIC_BIN == true ]]; then
    go_static_linked_envs
    go_cmd+=" $GO_ARGS"
  fi

  ( cd "$GOPATH" || exit
    for tool in "$@"; do
      go_tool=$(basename "$tool")
      if [[ ! -f "${GOPATH}/bin/${go_tool}" ]]; then
        log_line "Installing Go Tool '${go_tool}'"
        if [ "$GO_TOOL_VENDOR" == true ]; then
          go_import_path=${scaffolding_go_import_path:-$scaffolding_go_base_path/$pkg_name}
          eval "$go_cmd $go_import_path/vendor/$tool"
        else
          eval "$go_cmd $tool"
        fi
      fi
    done
  )
}

document "go_build" <<DOC
  Builds the $pkg_name binary. (a.k.a. go build)

  @(arg:1) The path to the go main package (default: cmd/${pkg_name}/${pkg_name}.go)
  @(arg:2) The path where the built binary file is placed.

  This helper will enfore the Go Workspace configureation.

  Example 1 :: Build a static linked binary.
  ------------------------------------------
  GO_STATIC_BIN=true go_build main.go

  Available extra steps before building the binary:

  1) To run 'go generate' set:
  => export RUN_GO_GENERATE=true

  2) To run 'dep ensure' set:
  => export RUN_GO_DEP=true

  Example 2 :: Build and place the binary file in a specific location.
  ------------------------------------------------------------------------
  go_build main.go /src/bin/main
DOC
function go_build() {
  if [[ "$1" ]]; then
    local go_main="$1"
  else
    local go_main="cmd/${pkg_name}/${pkg_name}.go"
  fi

  if [ "$2" ]; then
    local go_output="-o $2"
  fi

  setup_go_workspace

  local go_cmd="go build ${go_output:-}"

  if [[ $GO_STATIC_BIN == true ]]; then
    go_static_linked_envs
    go_cmd+=" $GO_ARGS"
  fi

  ( cd "$scaffolding_go_pkg_path" || exit
    if [[ $RUN_GO_GENERATE == true ]]; then
      log_line "Executing Go generate"
      go generate
    fi

    if [[ $RUN_GO_DEP == true ]]; then
      log_line "Executing dep ensure"
      dep_ensure
    fi
    log_line "Executing Go build: $go_cmd $go_main"
    eval "$go_cmd $go_main"
  )
}
add_alias "go_build" "gb"

document "dep_ensure" <<DOC
  Runs the go dependency solver if vendor/ is missing.

  This helper will ensure your Go workspace is configured and that
  you have the dep tool installed.
DOC
function dep_ensure() {
  local go_cmd="dep ensure -vendor-only"
  ( cd "$scaffolding_go_pkg_path" || exit
    # Run dep ensure only if vendor/ directory is missing
    if [[ ! -d vendor ]]; then
      install_go_tool github.com/golang/dep/cmd/dep
      log_line "Executing Go dependency solver ($go_cmd)"
      eval "$go_cmd"
    fi
  )
}
add_alias "dep_ensure" "de"

# This function will be your first place for debugging your Go service,
# once you are inside the debug console you can set breakpoints and more.
#
#   Docs => https://github.com/derekparker/delve/tree/master/Documentation/cli
#
# The helper expects you to implement two methods:
# => start_dependencies - That will start the service dependencies
# => service_parameters - That should provide the service parameters to start the service with
document "go_debug_mode" <<DOC
  Runs the $pkg_name in debug mode inside the studio.

  @(arg:1) The path to the go main package (default: cmd/${pkg_name}/${pkg_name}.go)

  Example 1 :: Passing a custom go main package
  ---------------------------------------------------------
  go_debug_mode app/main.go

  Example 2 :: Add extra options to the 'dlv debug' command
  ---------------------------------------------------------
  GO_DEBUG_OPTS="--init string" go_debug_mode

  This helper expects you to implement two methods:
    => start_dependencies - That will start the service dependencies
    => service_parameters - That should provide the service parameters to start the service with

  Example of the 'service_parameters' function to define
  ---------------------------------------------------------
  function service_parameters() {
    echo "start --host \$HOST --port \$PORT --elasticsearch-url \$ELASTICSEARCH_URL"
  }
DOC
#shellcheck disable=2120
function go_debug_mode() {
  if [[ "$1" ]]; then
    local go_main="$1"
  else
    local go_main="cmd/${pkg_name}/${pkg_name}.go"
  fi

  local go_cmd="dlv debug"
  local -r pid=$(grep_service_pid)
  if [[ ${pid} ]]; then
    error "There is a $pkg_name running. (${pid})"
    error "Stop the service with 'stop_service' then re-run '${FUNCNAME[0]}'"
    return 1
  fi

  # Install the debugging tooli
  install_go_tool github.com/derekparker/delve/cmd/dlv

  # Start the service dependencies if defined
  if [[ "$(type -t start_dependencies)" == "function" ]]; then
    start_dependencies
  fi

  # Add the main go package to debug
  go_cmd+=" $go_main"

  # Add static linked flags if needed
  if [[ $GO_STATIC_BIN == true ]]; then
    go_static_linked_envs
    go_cmd+=" --build-flags \"$GO_ARGS\""
  fi

  # Add extra debug options, helpful to stand up a Delve Server
  if [[ "${GO_DEBUG_OPTS:-}" ]]; then
    go_cmd+=" $GO_DEBUG_OPTS"
  fi

  # If 'service_parameters' function exists, pass it to the debugger
  if [[ "$(type -t service_parameters)" == "function" ]]; then
    go_cmd+=" -- $(service_parameters)"
  fi

  ( cd "$scaffolding_go_pkg_path" || exit
    if [[ $go_cmd != *"headless"* ]]; then
      log_line "Starting debug console:"
    fi
    eval "$go_cmd"
  )
}
add_alias "go_debug_mode" "gdm"

# Starts a headless Delve Server so that engineers that use IDE's like VS Code
# can connect to the remote service running in our habitat studio
#
# Default headless Delve Server port ':2345'
document "go_debug_server" <<DOC
  Starts a headless Delve Server to remotely debug the $pkg_name

  @(arg:1) The port to start the Delve Server (default: 2345)"

  NOTE: You have to set the 'HAB_DOCKER_OPTS' environment variable before entering
  the Studio so that Docker exposes the provided port. Ex. 'HAB_DOCKER_OPTS="-p 2345:2345"'
DOC
function go_debug_server() {
  local port=${1:-2345}
  log_line "Starting headless Delve Server in port '*:$port'"
  # shellcheck disable=2119
  GO_DEBUG_OPTS="--headless --listen=:$port --log" go_debug_mode
}
add_alias "go_debug_server" "gds"

# You wanna debug your running process? Well use this function to do so.
document "go_debug_attach_running_service" <<DOC
  Attach to a running $pkg_name and begin debugging inside the studio.
DOC
function go_debug_attach_running_service() {
  local -r pid=$(grep_service_pid)
  if [[ ${pid} ]]; then
    go_debug_attach_to_pid "$pid"
  else
    error "There is no '$pkg_name' running."
    return 1
  fi
}
add_alias "go_debug_attach_running_service" "gdas"


# Connect to the provided PID process (Must be a Go Applicaiton)
document "go_debug_attach_to_pid" <<DOC
  Attach to the provided PID and begin debugging inside the studio.

  @(arg:1) The PID to attach to (must be a Go application)
DOC
function go_debug_attach_to_pid() {
  if [[ -z $1 ]]; then
    error "You have to provide a PID to attach to"
    error "Run 'describe ${FUNCNAME[0]}' for more information"
    return 1
  fi

  local go_cmd="dlv attach $1 $pkg_name"
  # Add static linked flags if needed
  if [[ $GO_STATIC_BIN == true ]]; then
    go_static_linked_envs
    go_cmd+=" --build-flags \"$GO_ARGS\""
  fi

  install_go_tool github.com/derekparker/delve/cmd/dlv
  ( cd "$scaffolding_go_pkg_path" || exit
    log_line "Connection to PID '${1}':"
    eval "$go_cmd"
  )
}
add_alias "go_debug_attach_to_pid" "gdatp"

# Helper function to search for the PID of the service
function grep_service_pid() {
  install_if_missing core/busybox-static pgrep
  pgrep "$pkg_name"
}

# Helper function that you can call to prepare the studio to link static binaries
# it will export the necessary environment variables that then, you can use on
# your own helper methods
#
# Example: Add static linked flags if needed
#
#   local go_cmd="go build"
#   if [[ $GO_STATIC_BIN == true ]]; then
#     go_static_linked_envs
#     go_cmd+=" $GO_ARGS"
#   fi
#
function go_static_linked_envs() {
  install_if_missing core/musl musl-gcc
  install_if_missing core/gcc gcc
  if CC=$(hab pkg path core/musl)/bin/musl-gcc; then
    export CC
  else
    exit
  fi
  export GO_LDFLAGS="-linkmode external -extldflags '-static'"
  export GO_ARGS="--ldflags '$GO_LDFLAGS'"
}
