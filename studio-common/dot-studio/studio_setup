#!/bin/bash
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

document "generate_netrc_config" <<DOC
  Create a .netrc file that can be used to authenticate against GitHub.

  Some projects require access to private GitHub repositories. The recommended
  pattern is for projects to use the git+https protocol in conjuction with a
  .netrc file.

  Requirements:
  => Habitat 0.54.0 or greater installed
  => Specify 'HAB_STUDIO_SECRET_GITHUB_TOKEN' in your shell environment (outside the studio)

  To learn more about .netrc files, you can check out the following documentation:

    https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html
DOC
function generate_netrc_config() {
  if [[ -z "$GITHUB_TOKEN" ]]; then
    warn "Unable to configure ~/.netrc in the studio."
    warn ""
    warn "Missing the environment variable: HAB_STUDIO_SECRET_GITHUB_TOKEN"
    warn "Without this variable, you will be unable to access private GitHub repositories."
    warn ""
    warn "Verify that you have this variable exported before entering the studio:"
    warn "export HAB_STUDIO_SECRET_GITHUB_TOKEN=[your-secret-token]"
  else
    echo -e "machine github.com\\n  login $GITHUB_TOKEN" >> ~/.netrc
    chmod 0600 ~/.netrc
  fi
}


document "clone_function" <<DOC
  Create a copy of the ci-studio-common function in your .studio/ directory.

  If there is a function, provided by ci-studio-common, that isn't working exactly
  as required, you can use this function to create a copy of that function in your
  local .studio/ directory. You can then modify or manipulate that function declaration
  as necessary to meet your needs.

  From that point forward, anytime you open your studio, your copy of that function will
  be used, rather than the version that comes with ci-studio-common.

  If you need to use it immediately, you can source that file.

  . /src/.studio/override-common

  We encourage you to, if appropriate, contribute your changes back to ci-studio-common.
DOC
function clone_function() {
  local function="$1"

  # Return an error if that is not a defined function
  if [[ ! -f /tmp/docs/$function ]]; then
    error "ci-studio-common does not provide a '$function' function."
    return
  fi

  # Create the .studio directory if it's missing
  mkdir -p /src/.studio > /dev/null

  # Create the override-common file if it's Missing
  if [[ ! -f /src/.studio/override-common ]]; then
    cat << EOF > /src/.studio/override-common
#!/bin/bash
# In this file, you can override functions included with ci-studio-common to meet your needs.
# Please consider contributing any enhancements or improvements to chef/ci-studio-common
EOF
  fi

  # Add the contents of the function to the override file unless it has already
  # been overridden.
  if ! grep -w "$function\\(\\)" /src/.studio/override-common > /dev/null; then
    cat << EOF >> /src/.studio/override-common

document "$function" <<DOC
$(cat /tmp/docs/"$function")
DOC
function $(declare -f "$function")
EOF
    log_line "A copy of the '$(green "$function")' function has been added to /src/.studio/override-common."
  else
    warn "You have already cloned that function."
  fi

}
