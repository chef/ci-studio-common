#!/bin/bash
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

document "wait_for_success" <<DOC
  Wait for the given command to succeed.

  @(arg:*) The command to run

  Environment Variable:
    TIMEOUT - The time in seconds to check until failing

  Example 1
  ---------
  wait_for_success curl localhost:8080/status

  Example 2: Wait for 60 seconds before timing out
  ---------
  TIMEOUT=60 wait_for_success curl localhost:8080/status
DOC
function wait_for_success() {
  local SECONDS_WAITING=${TIMEOUT:-60}
  local COUNTER=0

  until "$@" &> /dev/null; do
    sleep 1

    log_line "Waiting for '$*' to succeed. ($(yellow "$COUNTER of $SECONDS_WAITING"))"

    if [[ $COUNTER -ge "$SECONDS_WAITING" ]]; then
      error "Command '$*' never succeeded in $(red "$SECONDS_WAITING") seconds."
      return 1
    fi
    (( COUNTER=COUNTER+1 ))
  done
}

document "svc_running" <<DOC
  Helper function to ask the Habitat supervisor if a service is running or not.

  @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
DOC
function svc_running() {
  local rc=0
  local svc_status=""
  svc_status=$(hab svc status "$1" 2>/dev/null)
  rc=$?
  if [[ $rc != 0 ]]; then
    return $rc
  fi

  if [[ $(echo "$svc_status" | tail -1 | awk '{print $4}') == "up" ]]; then
    return 0
  else
    return 1
  fi
}

document "wait_for_svc_to_load" <<DOC
  Helper function to wait for a Habitat service (hab svc) to be loaded by the Habitat Supervisor.

  DEPRECATED: Use 'wait_or_fail_for_svc_to_load' instead

  @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
  @(arg:2) Wheter or not this process runs silently
DOC
function wait_for_svc_to_load() {
  echo " => DEPRECATED: Use 'wait_or_fail_for_svc_to_load' instead"
}

document "wait_or_fail_for_svc_to_load" <<DOC
  Helper function to wait for a Habitat service (hab svc) to be loaded by the Habitat Supervisor.

  @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
  @(arg:2) Number of seconds to wait before returning 1. (default: 60 seconds)
  @(arg:3) Wheter or not this process runs silently
DOC
function wait_or_fail_for_svc_to_load() {
  local SECONDS_WAITING=${2:-60}
  local COUNTER=0

  while [[ $(hab svc status "$1" | tail -1 | awk '{print $4}') != "up" ]]; do
    sleep 1

    if [[ $COUNTER -ge "$SECONDS_WAITING" ]]; then
      error "Habitat service '$(red "$1")' failed to load."
      return 1
    fi

    (( COUNTER=COUNTER+1 ))

    [[ "${3:-}" != "silent" ]] && log_line "Waiting to load svc '$(yellow "$1")'. ($(yellow "$COUNTER of $SECONDS_WAITING"))";
  done
}

document "wait_for_port_to_listen" <<DOC
  Wait for a port to be listening.

  DEPRECATED: Use 'wait_or_fail_for_port_to_listen' instead

  @(arg:1) Port to wait for to be listening
  @(arg:2) Wheter or not this process runs silently
DOC
function wait_for_port_to_listen() {
  echo " => DEPRECATED: Use 'wait_or_fail_for_port_to_listen' instead"
}

document "wait_or_fail_for_port_to_listen" <<DOC
  Wait for a port to be listening. If the port is not found in the set amount of time this helper returns 1.

  @(arg:1) Port to wait for to be listening
  @(arg:2) Number of seconds to wait before returning 1. (default: 60 seconds)
  @(arg:3) Wheter or not this process runs silently

  Example: Wait for a service to start listening on port 1234 for 1 minute (defaults)
  ---------------------------------------------
  wait_or_fail_for_port_to_listen 1234

  Example: Wait for a service to start listening on port 1234 for 10 seconds
  ---------------------------------------------
  wait_or_fail_for_port_to_listen 1234 10
DOC
function wait_or_fail_for_port_to_listen() {
  install_if_missing core/busybox-static netstat
  local SECONDS_WAITING=${2:-60}

  local COUNTER=0
  while ! netstat -an | grep "$1" | grep LISTEN &>/dev/null; do
    sleep 1

    if [[ $COUNTER -ge "$SECONDS_WAITING" ]]; then
      error "Failed listening for port '$1'"
      return 1
    fi

    (( COUNTER=COUNTER+1 ))
    [[ "${3:-}" != "silent" ]] && log_line "Waiting for port '$(yellow "$1")' to be listening ($(yellow "$COUNTER of $SECONDS_WAITING"))";
  done
}

document "wait_for_ok_response" <<DOC
  Wait a set amount of time for the provided URL to response with status code (200).
  If the time expires then this helper returns 1

  @(arg:1) URL to curl
  @(arg:2) Number of seconds to wait before returning 1. (default: 60 seconds)

  Example: Wait for www.google.com to return Ok for 1 minute
  ---------------------------------------------
  wait_or_fail_for_ok_response www.google.com 60

  Example: Wait for www.google.com to return Ok for 10 seconds
  ---------------------------------------------
  wait_or_fail_for_ok_response www.google.com 10
DOC
function wait_for_ok_response() {
  local url="${1:?Missing url argument; try 'describe wait_for_ok_response'}"
  local SECONDS_TO_WAIT=${2:-60}

  code=200;
  install_if_missing core/curl curl
  local COUNTER=0
  local response

  while [[ $COUNTER -le "$SECONDS_TO_WAIT"  ]]; do
    # shellcheck disable=SC1083
    response="$(curl --write-out %{http_code} --silent --output /dev/null "$url")"
    if [[ $response -eq $code ]]; then
      break
    else
      log_line "Waiting for '$url' to response OK ($code). [Got:$response] ($(yellow "$COUNTER of $SECONDS_TO_WAIT"))"
      sleep 1
      (( COUNTER=COUNTER+1 ))
    fi

    if [[ $COUNTER -ge "$SECONDS_WAITING" ]]; then
      return 1
    fi
  done
}
